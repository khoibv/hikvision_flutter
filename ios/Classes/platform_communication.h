// Autogenerated from Pigeon (v3.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import <Foundation/Foundation.h>
@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

@class LoginRequest;
@class AccsResponse;
@class PlaybackRequest;

@interface LoginRequest : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithIp:(NSString *)ip
    port:(NSNumber *)port
    username:(NSString *)username
    password:(NSString *)password
    channelNo:(NSNumber *)channelNo;
@property(nonatomic, copy) NSString * ip;
@property(nonatomic, strong) NSNumber * port;
@property(nonatomic, copy) NSString * username;
@property(nonatomic, copy) NSString * password;
@property(nonatomic, strong) NSNumber * channelNo;
@end

@interface AccsResponse : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithStatus:(NSString *)status
    errorMessage:(nullable NSString *)errorMessage;
@property(nonatomic, copy) NSString * status;
@property(nonatomic, copy, nullable) NSString * errorMessage;
@end

@interface PlaybackRequest : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithTimeFrom:(NSString *)timeFrom
    timeTo:(NSString *)timeTo;
@property(nonatomic, copy) NSString * timeFrom;
@property(nonatomic, copy) NSString * timeTo;
@end

/// The codec used by HikvisionSdk.
NSObject<FlutterMessageCodec> *HikvisionSdkGetCodec(void);

@protocol HikvisionSdk
- (void)initialize:(void(^)(AccsResponse *_Nullable, FlutterError *_Nullable))completion;
- (void)login:(LoginRequest *)request completion:(void(^)(AccsResponse *_Nullable, FlutterError *_Nullable))completion;
- (void)logout:(void(^)(AccsResponse *_Nullable, FlutterError *_Nullable))completion;
- (void)startLive:(void(^)(AccsResponse *_Nullable, FlutterError *_Nullable))completion;
- (void)stopLive:(void(^)(AccsResponse *_Nullable, FlutterError *_Nullable))completion;
- (void)startPlayback:(PlaybackRequest *)request completion:(void(^)(AccsResponse *_Nullable, FlutterError *_Nullable))completion;
- (void)pausePlayback:(void(^)(AccsResponse *_Nullable, FlutterError *_Nullable))completion;
- (void)resumePlayback:(void(^)(AccsResponse *_Nullable, FlutterError *_Nullable))completion;
- (void)refreshPlayback:(void(^)(AccsResponse *_Nullable, FlutterError *_Nullable))completion;
- (void)getPlaybackSnapshot:(void(^)(AccsResponse *_Nullable, FlutterError *_Nullable))completion;
- (void)playPlaybackFast:(void(^)(AccsResponse *_Nullable, FlutterError *_Nullable))completion;
- (void)playPlaybackSlow:(void(^)(AccsResponse *_Nullable, FlutterError *_Nullable))completion;
- (void)playPlaybackNormalSpeed:(void(^)(AccsResponse *_Nullable, FlutterError *_Nullable))completion;
- (void)openPlaybackSound:(void(^)(AccsResponse *_Nullable, FlutterError *_Nullable))completion;
- (void)closePlaybackSound:(void(^)(AccsResponse *_Nullable, FlutterError *_Nullable))completion;
- (void)setPlaybackVolume:(NSNumber *)volumePercent completion:(void(^)(AccsResponse *_Nullable, FlutterError *_Nullable))completion;
- (void)searchPlaybackFilesInRange:(NSString *)fromTime to:(NSString *)toTime completion:(void(^)(AccsResponse *_Nullable, FlutterError *_Nullable))completion;
@end

extern void HikvisionSdkSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<HikvisionSdk> *_Nullable api);

NS_ASSUME_NONNULL_END
